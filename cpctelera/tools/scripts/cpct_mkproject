#!/bin/bash
##-----------------------------LICENSE NOTICE------------------------------------
##  This file is part of CPCtelera: An Amstrad CPC Game Engine 
##  Copyright (C) 2015-2016 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU Lesser General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU Lesser General Public License for more details.
##
##  You should have received a copy of the GNU Lesser General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##------------------------------------------------------------------------------

###########################################################################
## CPCTELERA ENGINE
###########################################################################

##
## File: cpct_mkproject
##    This script helps in the creation of new projects that use CPCtelera
## engine.
##
## Usage:
##    <cpct_mkproject> [foldername] [options]
##
## Description:
##    This script creates a new folder and fills it up with required files
## to use that folder as a basic CPCtelera project. Once the folder is
## created, you only have to launch 'make' command inside it to compile
## the project an generate DSK and CDT files. A basic main.c source file
## is created under src/ sub-folder, and a standard build_config.mk file 
## under cfg/ folder. You may edit both and add new source files as 
## required by your project.
##
## Command line options:
##    -c | --cpcrslib                - Generates a CPCRSLib enabled project
##    -s | --no-vs-code              - Prevents creation of .vscode/ subfolder
##    -n | --project-name [projname] - Lets you name your project in a different
## way than the project folder.
##    -l | --load-address [loadaddr] - Lets you establish the memory address where
## the binary of your project should be loaded into CPC memory. Default value is 0x4000.
## You always can change this value by editing cfg/build_config.mk
##    -h | --help                      - Shows help information on the terminal.
##

## Bash Include files
source $(dirname $0)/lib/bash_library.sh

## Initial parameters
PROJECTNAME=
PROJECTDIR=
LOADADDRESS=4000
CPCRSLIB=false
VSCODE=true

## Required template files
getFullPath $0 SCRIPT_FULL_PATH
TEMPLATE_DIRECTORY=${SCRIPT_FULL_PATH}/templates
CPCTELERA_DIRECTORY=$(dirname $(dirname "$SCRIPT_FULL_PATH"))
SRC_TEMPLATE=${TEMPLATE_DIRECTORY}/main.c
MAKE_TEMPLATE=${TEMPLATE_DIRECTORY}/Makefile
IMGCON_TEMPLATE=${TEMPLATE_DIRECTORY}/image_conversion.mk
TMXCON_TEMPLATE=${TEMPLATE_DIRECTORY}/tilemap_conversion.mk
MUSCON_TEMPLATE=${TEMPLATE_DIRECTORY}/music_conversion.mk
CFG_TEMPLATE=${TEMPLATE_DIRECTORY}/build_config.mk
VSCODE_TEMPLATE_DIR=${TEMPLATE_DIRECTORY}/vscode/
ALL_TEMPLATE_FILES=(${SRC_TEMPLATE} ${MAKE_TEMPLATE} ${CFG_TEMPLATE} \
                    ${IMGCON_TEMPLATE} ${TMXCON_TEMPLATE} ${MUSCON_TEMPLATE})

## Replacement tags
TAG_PROJECTNAME="%%%PROJECT_NAME%%%"
TAG_LOADADDRESS="%%%CODE_LOAD_ADDRESS%%%"
TAG_CPCTELERAPATH="%%%CPCTELERA_PATH%%%"

## Characters not valid for project name
UNSUPPORTED_CHARACTERS='_|?*@.%;:<>,=()[\]/\\'

## Show how this script is to be used and exit
##
function usage() {
   echo "${COLOR_LIGHT_YELLOW}USAGE"
   echo "  ${COLOR_LIGHT_BLUE}$(basename $0) ${COLOR_LIGHT_CYAN}<project_folder_name> [options]"
   echo
   echo "${COLOR_CYAN}  Creates a fresh new project that uses CPCtelera engine. The script creates \
a new folder named <project_folder_name> in the current folder. Then, the new project is created \
inside <project_folder_name>. So, <project_folder_name> must not previously exist inside the \
current folder."
   echo
   echo "${COLOR_LIGHT_YELLOW}OPTIONS"
   echo "${COLOR_LIGHT_BLUE}  -c | --cpcrslib"
   echo "${COLOR_CYAN}       Generates a CPCRSLib enabled project."
   echo
   echo "${COLOR_LIGHT_BLUE}  -n | --project-name  ${COLOR_LIGHT_CYAN}<name>"
   echo "${COLOR_CYAN}       Gives a name to the project that is distinct from the <project_folder_name> name. <name> \
must not contain spaces."
   echo
   echo "${COLOR_LIGHT_BLUE}  -s | --no-vs-code"
   echo "${COLOR_CYAN}       Prevents creation of .vscode/ subfolder."
   echo
   echo "${COLOR_LIGHT_BLUE}  -l | --load-address ${COLOR_LIGHT_CYAN}<hexadecimal address>"
   echo "${COLOR_CYAN}       Establishes the hexadecimal address where the binary of the project will be loaded \
inside Amstrad CPC's memory."
   echo 
   echo "${COLOR_LIGHT_BLUE}  -h | --help"
   echo "${COLOR_CYAN}       Shows this help information"
   echo ${COLOR_NORMAL}
   exit 1
}

###############################################################
###############################################################
## Check template files are present
##
for (( i=0; i < ${#ALL_TEMPLATE_FILES[@]}; i++)); do
   F=${ALL_TEMPLATE_FILES[$i]}
   EnsureExists file "$F" "It is a template file required to create new projects. Please check that the file \
exists and it has read permission for your user."
done

###############################################################
###############################################################
## Check command line parameters
##

if (( $# < 1 )); then
   usage
fi

while (( $# >= 1 )); do
   case $1 in
      ## Generate a CPCRSLib enabled project
      "-c" | "--cpcrslib")
         CFG_TEMPLATE=${TEMPLATE_DIRECTORY}/cpcrslib/build_config.mk
         SRC_TEMPLATE=${TEMPLATE_DIRECTORY}/cpcrslib/main.c
         CPCRSLIB=true
      ;;
      ## Get an specific project name
      "-n" | "--project-name")
         if isEmpty "$2"; then
            paramError "'-n'/'--project-name' options require a valid project name afterwards." 2
         elif isCommandLineOption "$2"; then
            paramError "A valid one-word project name should follow '-n'/'--project-name'" 3
         fi
         PROJECTNAME="$2"
         shift
      ;;
      "-s" | "--no-vs-code")
         VSCODE=false
      ;;
      ## Get Load Address
      "-l" | "--load-address")
         if ! isHex "$2"; then
            paramError "Option -l should be followed by a valid hexadecimal value (load address)" 4
         elif [[ ${#2} > 4 ]]; then
            paramError "LoadAddres (-l) should be between 1 and 4 digits (0000 - FFFF)" 5
         fi
         LOADADDRESS="$2"
         shift
      ;;
      ## Show Help
      "-h" | "--help")
         usage
      ;;
      ## Get main parameter (ProjectDir)
      *)
         if isCommandLineOption "$1"; then
            paramError "Unrecognized command line option '$1'" 7
         elif ! isEmpty "$PROJECTDIR"; then
            paramError "Unrecognized parameter '$1'. Have you already provided a <project_folder> parameter?" 6
         elif [[ $1 =~ ^.*/.*$ ]]; then
            paramError "'$1' is not a valid name for your project folder. Project folder names must not contain slashes '/'." 7
         elif [ -e "$1" ]; then
            paramError "'$1' already exist in filesystem. Choose another name for your <project_folder>" 8
         fi
         PROJECTDIR="$1"
      ;;
   esac
   shift
done

###############################################################
###############################################################
## Some checks
##
if isEmpty "$PROJECTDIR"; then
   paramError "No name was given to create project main folder."
fi
if isEmpty "$PROJECTNAME"; then
   PROJECTNAME="$PROJECTDIR"
fi
CHAR=$(containsChars "$PROJECTNAME" "$UNSUPPORTED_CHARACTERS")
if (( ${#CHAR} > 0 )); then
   paramError "Unsuported character for an AMSDOS program ('$CHAR')" 9
fi

###############################################################
###############################################################
## Create new project
##

## Objective directory structure
SOURCE_DIR=${PROJECTDIR}/src
CONFIG_DIR=${PROJECTDIR}/cfg
NEW_MAIN=${SOURCE_DIR}/main.c
NEW_BUILD=${CONFIG_DIR}/build_config.mk
NEW_IMGCON=${CONFIG_DIR}/image_conversion.mk
NEW_TMXCON=${CONFIG_DIR}/tilemap_conversion.mk
NEW_MUSCON=${CONFIG_DIR}/music_conversion.mk
NEW_MAKE=${PROJECTDIR}/Makefile
NEW_VSCODE=${PROJECTDIR}/.vscode

# Welcome message
stageMessage "CPCtelera" "Creating new project in ${COLOR_WHITE}${PROJECTDIR}/"

## CPCRSLib enabled
if $CPCRSLIB; then
   coloredMachineEcho "${COLOR_CYAN}" 0.005 "> Enabling ${COLOR_WHITE}CPCRSLib${COLOR_CYAN} linking..."
   drawOK
fi

## Create directory structure
coloredMachineEcho "${COLOR_CYAN}" 0.005 "> Creating project folder structure..."
mkdir -p ${SOURCE_DIR}
mkdir -p ${CONFIG_DIR}
drawOK

## Copy templates substituting tags
coloredMachineEcho "${COLOR_CYAN}" 0.005 "> Copying files from project templates..."
cp ${SRC_TEMPLATE} ${NEW_MAIN}
cp ${CFG_TEMPLATE} ${NEW_BUILD}
cp ${MAKE_TEMPLATE} ${NEW_MAKE}
cp ${IMGCON_TEMPLATE} ${NEW_IMGCON}
cp ${TMXCON_TEMPLATE} ${NEW_TMXCON}
cp ${MUSCON_TEMPLATE} ${NEW_MUSCON}
drawOK

## Copy VSCode config directory template
if $VSCODE; then
   coloredMachineEcho "${COLOR_CYAN}" 0.005 "> Copying basic VS Code project configuration..."
   cp -r ${VSCODE_TEMPLATE_DIR} ${NEW_VSCODE}
   drawOK
fi


# Configuring project values into CFG_TEMPLATE
coloredMachineEcho "${COLOR_CYAN}" 0.005 "> Configuring project name to: ${COLOR_WHITE}${PROJECTNAME}"
replaceTag "$TAG_PROJECTNAME" "$PROJECTNAME" "$NEW_BUILD"
drawOK

coloredMachineEcho "${COLOR_CYAN}" 0.005 "> Configuring z80 code load address: ${COLOR_WHITE}${LOADADDRESS}"
replaceTag "$TAG_LOADADDRESS" "$LOADADDRESS" "$NEW_BUILD"
drawOK

# Set the appropriate CPCtelera folder for the makefile 
# (take into account if there exists #CPCT_PATH environment variable and is correct)
coloredMachineEcho "${COLOR_CYAN}" 0.005 '> Configuring $CPCT_PATH: '
if [ -d "$CPCT_PATH" ]; then
   replaceTaggedLine "$TAG_CPCTELERAPATH" '#>> Uses environment variable $(CPCT_PATH)' "$NEW_BUILD"
   coloredMachineEcho "${COLOR_GREEN}" 0.005 "Using environment variable"
   drawOK
else
   replaceTaggedLine "$TAG_CPCTELERAPATH" "CPCT_PATH:=$CPCTELERA_DIRECTORY" "$NEW_BUILD" '#'
   coloredMachineEcho "${COLOR_GREEN}" 0.005 "$CPCTELERA_DIRECTORY"$'\n'
   coloredMachineEcho "${COLOR_LIGHT_MAGENTA}" 0.005 '[Warning]: '
   coloredMachineEcho "${COLOR_MAGENTA}" 0.005 "${COLOR_CYAN}"'$CPCT_PATH'"${COLOR_MAGENTA} environment variable not found or incorrect. \
Check CPCtelera's installation (you may want to run ${COLOR_CYAN}setup.sh${COLOR_MAGENTA} again)."$'\n'
fi

# Bye Message
stageMessage "CPCtelera" "New project created in ${COLOR_WHITE}${PROJECTDIR}/"
