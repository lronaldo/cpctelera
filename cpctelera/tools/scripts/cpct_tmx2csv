#!/bin/bash

##-----------------------------LICENSE NOTICE------------------------------------
##  This file is part of CPCtelera: An Amstrad CPC Game Engine 
##  Copyright (C) 2015 ronaldo / Fremos / Cheesetea / ByteRealms (@FranGallegoBR)
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU Lesser General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU Lesser General Public License for more details.
##
##  You should have received a copy of the GNU Lesser General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
##------------------------------------------------------------------------------

###########################################################################
## CPCTELERA ENGINE
###########################################################################

##
## File: cpct_tmx2csv
##    Script for generating csv files with maps defined in tmx files 
## (from tiled map editor).
##
## Usage:
##    <cpct_tmx2csv> [file] [options]
##
## Known limitations:
##    * This script will *only* work with tmx files saved as CSV format. 
## Output format must be selected as CSV in tilemap properties.
##
## Description:
##    This script converts tmx files saved in CSV format to csv files
## ready to be included in C source files using #include directive.
## It also reindexes tile ids starting from 0 (as in tmx files tile ids
## start from 1).
##
##    Conversion is output to the screen.
##
## Command line options:
##    -h  | --help                   - Shows help information on the terminal.
##    -gc | --generate-c             - Generates a C file with an array containing converted values
##    -gh | --generate-h             - Generates a H file with the declaration of the array for C file (implies -gc)
##    -of | --output-folder <folder> - Changes the output folder for generated C/H files (Default: .)
##    -ci | --c-identifier <id>      - Sets the C-identifier that will be used for the generated array (Default: filename)
##


## Bash Include files
source $(dirname $0)/lib/bash_library.sh

## Show how this script is to be used and exit
##
function usage() {
   echo "${COLOR_LIGHT_YELLOW}USAGE"
   echo "  ${COLOR_LIGHT_BLUE}$(basename $0) ${COLOR_LIGHT_CYAN}<filename> [options]"
   echo
   echo "${COLOR_CYAN}    Script for generating csv files with maps defined in tmx files \
(from tiled map editor)."
   echo
   echo "${COLOR_CYAN}    This script converts tmx files saved in CSV format to csv files \
ready to be included in C source files using #include directive. It also reindexes tile ids \
starting from 0 (as in tmx files tile ids start from 1)."
   echo 
   echo "${COLOR_CYAN}    Conversion is output to stdout unless otherwise requested by options."
   echo
   echo "${COLOR_LIGHT_YELLOW}KNOWN LIMITATIONS"
   echo "${COLOR_CYAN}    This script will ${COLOR_LIGHT_BLUE}only${COLOR_CYAN} work with \
tmx files saved as ${COLOR_LIGHT_BLUE}CSV format${COLOR_CYAN}. Output format must be selected \
as ${COLOR_LIGHT_BLUE}CSV${COLOR_CYAN} in tilemap properties."
   echo
   echo "${COLOR_LIGHT_YELLOW}OPTIONS"
   echo 
   echo "${COLOR_LIGHT_BLUE}  -h  | --help"
   echo "${COLOR_CYAN}       Shows this help information"
   echo "${COLOR_LIGHT_BLUE}  -gc | --generate-c"
   echo "${COLOR_CYAN}       Generates a C file with an array containing converted values"
   echo "${COLOR_LIGHT_BLUE}  -gh | --generate-h"
   echo "${COLOR_CYAN}       Generates a H file with the declaration of the array for C file (implies -gc)"
   echo "${COLOR_LIGHT_BLUE}  -of | --output-folder <folder>"
   echo "${COLOR_CYAN}       Changes the output folder for generated C/H files (Default: .)"
   echo "${COLOR_LIGHT_BLUE}  -ci | --c-identifier <id>"
   echo "${COLOR_CYAN}       Sets the C-identifier that will be used for the generated array (Default: filename)"
   echo "${COLOR_NORMAL}"
   exit 1
}

##############################################################
###############################################################
## Check command line parameters
##
FILENAME=
C_IDENTIFIER=
OUTPUT_FOLDER=
GENERATE_H=false
GENERATE_C=false
WIDTH_BYTES=0
HEIGHT_BYTES=0
if (( $# < 1 )); then
   usage
fi

while (( $# >= 1 )); do
   case $1 in
      ## Show Help
      "-h" | "--help")
         usage
      ;;
      ## Generate C file
      "-gc" | "--generate-c")
         GENERATE_C=true
      ;;
      ## Generate H file
      "-gh" | "--generate-h")
         # Generate H implies generate C
         GENERATE_H=true
         GENERATE_C=true
      ;;
      ## Output folder
      "-of" | "--output-folder")
         if isEmpty "$2"; then
            paramError "Option '-of' | '--output-folder' requires a valid folder as parameter." 8
         elif ! isFolderReadable "$2"; then
            paramError "Folder '$2' does not exist or is not readable." 9
         fi
         OUTPUT_FOLDER="${2}/"
         shift
      ;;
      "-ci" | "--c-identifier")
         if isEmpty "$2"; then
            paramError "Option '-ci' | '--c-identifier' requires a valid c identifier as parameter." 10
         elif ! isValidCIdentifier "$2"; then
            paramError "'$2' is not a valid C-identifier." 11
         fi
         C_IDENTIFIER="$2"
         shift
      ;;
      ## Get main parameter (ProjectDir)
      *)
         if isCommandLineOption "$1"; then
            paramError "Unrecognized command line option '$1'" 7
         elif ! isEmpty "$FILENAME"; then
            paramError "Unrecognized parameter '$1'. Have you already provided a <filename> parameter?" 6
         else
            EnsureExists file "$1"
         fi
         FILENAME="$1"
      ;;
   esac
   shift
done

## Calculate Required output filenames and modify output if required
DIR=$(dirname $FILENAME)
BASENAME=$(basename $FILENAME)
BASENAME=${BASENAME%%.*}
if $GENERATE_C; then
   C_FILENAME=${BASENAME}.c
   C_OUTPUT=${OUTPUT_FOLDER}${C_FILENAME}
fi
if $GENERATE_H; then
   H_FILENAME=${BASENAME}.h
   H_OUTPUT=${OUTPUT_FOLDER}${H_FILENAME}
fi

## Set the C_IDENTIFIER if not set
if (( ${#C_IDENTIFIER} == 0 )); then
   C_IDENTIFIER="$BASENAME"
fi

###############################################################
###############################################################
## Read and convert file
##
function convertTMX2CSV {
   ## Convert binary to C Array and output to stdout
   STATUS=filestart
   TOTAL_BYTES_CONVERTED=0
   while read LINE; do
      case $STATUS in
         ## Looking for the layer containing CSV values (to know height and width)
         filestart)
            re="^.*\<layer.*width.*height.*\>.*$"
            if [[ $LINE =~ $re ]]; then
               ## Found the first layer, height and width will be taken from here
               STATUS=looking4CSV
               WIDTH_BYTES=$(echo $LINE | grep -Eo 'width="[0-9]+"' | grep -Eo '[0-9]+')
               HEIGHT_BYTES=$(echo $LINE | grep -Eo 'height="[0-9]+"' | grep -Eo '[0-9]+')
            fi
         ;;
         ## Looking for start of CSV values. 
         looking4CSV)  
            re="^.*\<data\>.*\<encoding\>.*\<csv\>.*$"
            if [[ $LINE =~ $re ]]; then
               ## Found line that signals data start, change to convertingbytes status
               ## and set token separator to comma, as we have comma separated values
               STATUS=convertingbytes
               IFS="${IFS},"$'\r'
            fi
         ;;
         ## Converting comma separated values into tiles
         convertingbytes)
            re="^.*\<data\>.*$"
            if [[ $LINE =~ $re ]]; then
               ## Found line signaling end of data, move to endconversion status
               STATUS=endconversion
            else
               ## Next line of data values, output it converting integers
               BYTES=( $LINE )
               for A in ${BYTES[@]}; do
                  if isInt "$A"; then
                     printf "%s," $((A - 1))
                     TOTAL_BYTES_CONVERTED=$((TOTAL_BYTES_CONVERTED+1))
                  fi
               done
            fi        
         ;;
         *) 
            ## We've finished converting data, end
            break;
         ;;
      esac
   done < $FILENAME
}

## Convert TMX to CSV in a temporal file
TMPFILE=$(createTempFile)
convertTMX2CSV >> $TMPFILE

## Define the comment to put on fileheader
FILEHEADER="//\n\
// File $FILENAME converted to csv using cpct_tmx2csv [$(date +"%Y%m%d %T %Z")]\n\
//\n"

## Output the C Array declaration and the number of bytes to stdout
if $GENERATE_C; then
   echo "Generating '$C_OUTPUT'..."
   cat > $C_OUTPUT <<_E_O_F_
$(printf "$FILEHEADER")
#include <types.h>

// Generated CSV tilemap from $FILENAME
const u8 ${C_IDENTIFIER}[${WIDTH_BYTES}*${HEIGHT_BYTES}] = {
   $(cat $TMPFILE)
};
_E_O_F_
else
   printf "$FILEHEADER"
   cat $TMPFILE
fi

## Generate H file if required
if $GENERATE_H; then
   echo "Generating '$H_OUTPUT'..."
   cat > $H_OUTPUT <<_E_O_F_
$(printf "$FILEHEADER")
#include <types.h>

// Generated CSV tilemap from $FILENAME
extern const u8 ${C_IDENTIFIER}[${WIDTH_BYTES}*${HEIGHT_BYTES}];
_E_O_F_
fi